// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/coga.h"
#include <RcppGSL.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// dcoga2dim_nv
double dcoga2dim_nv(double x, double shape1, double shape2, double rate1, double rate2);
static SEXP coga_dcoga2dim_nv_try(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type rate1(rate1SEXP);
    Rcpp::traits::input_parameter< double >::type rate2(rate2SEXP);
    rcpp_result_gen = Rcpp::wrap(dcoga2dim_nv(x, shape1, shape2, rate1, rate2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_dcoga2dim_nv(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_dcoga2dim_nv_try(xSEXP, shape1SEXP, shape2SEXP, rate1SEXP, rate2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dcoga2dim
NumericVector dcoga2dim(NumericVector x, double shape1, double shape2, double rate1, double rate2);
static SEXP coga_dcoga2dim_try(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type rate1(rate1SEXP);
    Rcpp::traits::input_parameter< double >::type rate2(rate2SEXP);
    rcpp_result_gen = Rcpp::wrap(dcoga2dim(x, shape1, shape2, rate1, rate2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_dcoga2dim(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_dcoga2dim_try(xSEXP, shape1SEXP, shape2SEXP, rate1SEXP, rate2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pcoga2dim_nv
double pcoga2dim_nv(double x, double shape1, double shape2, double rate1, double rate2);
static SEXP coga_pcoga2dim_nv_try(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type rate1(rate1SEXP);
    Rcpp::traits::input_parameter< double >::type rate2(rate2SEXP);
    rcpp_result_gen = Rcpp::wrap(pcoga2dim_nv(x, shape1, shape2, rate1, rate2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_pcoga2dim_nv(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_pcoga2dim_nv_try(xSEXP, shape1SEXP, shape2SEXP, rate1SEXP, rate2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pcoga2dim
NumericVector pcoga2dim(NumericVector x, double shape1, double shape2, double rate1, double rate2);
static SEXP coga_pcoga2dim_try(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type rate1(rate1SEXP);
    Rcpp::traits::input_parameter< double >::type rate2(rate2SEXP);
    rcpp_result_gen = Rcpp::wrap(pcoga2dim(x, shape1, shape2, rate1, rate2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_pcoga2dim(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_pcoga2dim_try(xSEXP, shape1SEXP, shape2SEXP, rate1SEXP, rate2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pcoga2dim_diff_shape
double pcoga2dim_diff_shape(double x, double shape1, double shape2, double rate1, double rate2);
static SEXP coga_pcoga2dim_diff_shape_try(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type rate1(rate1SEXP);
    Rcpp::traits::input_parameter< double >::type rate2(rate2SEXP);
    rcpp_result_gen = Rcpp::wrap(pcoga2dim_diff_shape(x, shape1, shape2, rate1, rate2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_pcoga2dim_diff_shape(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP rate1SEXP, SEXP rate2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_pcoga2dim_diff_shape_try(xSEXP, shape1SEXP, shape2SEXP, rate1SEXP, rate2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dcoga
NumericVector dcoga(NumericVector x, NumericVector shape, NumericVector rate);
static SEXP coga_dcoga_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(dcoga(x, shape, rate));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_dcoga(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_dcoga_try(xSEXP, shapeSEXP, rateSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pcoga
NumericVector pcoga(NumericVector x, NumericVector shape, NumericVector rate);
static SEXP coga_pcoga_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(pcoga(x, shape, rate));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP coga_pcoga(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(coga_pcoga_try(xSEXP, shapeSEXP, rateSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int coga_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*dcoga2dim_nv)(double,double,double,double,double)");
        signatures.insert("NumericVector(*dcoga2dim)(NumericVector,double,double,double,double)");
        signatures.insert("double(*pcoga2dim_nv)(double,double,double,double,double)");
        signatures.insert("NumericVector(*pcoga2dim)(NumericVector,double,double,double,double)");
        signatures.insert("double(*pcoga2dim_diff_shape)(double,double,double,double,double)");
        signatures.insert("NumericVector(*dcoga)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*pcoga)(NumericVector,NumericVector,NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP coga_RcppExport_registerCCallable() { 
    R_RegisterCCallable("coga", "coga_dcoga2dim_nv", (DL_FUNC)coga_dcoga2dim_nv_try);
    R_RegisterCCallable("coga", "coga_dcoga2dim", (DL_FUNC)coga_dcoga2dim_try);
    R_RegisterCCallable("coga", "coga_pcoga2dim_nv", (DL_FUNC)coga_pcoga2dim_nv_try);
    R_RegisterCCallable("coga", "coga_pcoga2dim", (DL_FUNC)coga_pcoga2dim_try);
    R_RegisterCCallable("coga", "coga_pcoga2dim_diff_shape", (DL_FUNC)coga_pcoga2dim_diff_shape_try);
    R_RegisterCCallable("coga", "coga_dcoga", (DL_FUNC)coga_dcoga_try);
    R_RegisterCCallable("coga", "coga_pcoga", (DL_FUNC)coga_pcoga_try);
    R_RegisterCCallable("coga", "coga_RcppExport_validate", (DL_FUNC)coga_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"coga_dcoga2dim_nv", (DL_FUNC) &coga_dcoga2dim_nv, 5},
    {"coga_dcoga2dim", (DL_FUNC) &coga_dcoga2dim, 5},
    {"coga_pcoga2dim_nv", (DL_FUNC) &coga_pcoga2dim_nv, 5},
    {"coga_pcoga2dim", (DL_FUNC) &coga_pcoga2dim, 5},
    {"coga_pcoga2dim_diff_shape", (DL_FUNC) &coga_pcoga2dim_diff_shape, 5},
    {"coga_dcoga", (DL_FUNC) &coga_dcoga, 3},
    {"coga_pcoga", (DL_FUNC) &coga_pcoga, 3},
    {"coga_RcppExport_registerCCallable", (DL_FUNC) &coga_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_coga(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
