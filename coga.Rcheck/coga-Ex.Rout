
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "coga"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "coga-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('coga')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dcoga")
> ### * dcoga
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dcoga
> ### Title: Convolution of Gamma Distributions (Exact Method).
> ### Aliases: dcoga pcoga rcoga
> 
> ### ** Examples
> 
> ## Example 1: Correctness check
> set.seed(123)
> ## do grid
> y <- rcoga(100000, c(3,4,5), c(2,3,4))
> grid <- seq(0, 15, length.out=100)
> ## calculate pdf and cdf
> pdf <- dcoga(grid, shape=c(3,4,5), rate=c(2,3,4))
> cdf <- pcoga(grid, shape=c(3,4,5), rate=c(2,3,4))
> 
> ## plot pdf
> plot(density(y), col="blue")
> lines(grid, pdf, col="red")
> 
> ## plot cdf
> plot(ecdf(y), col="blue")
> lines(grid, cdf, col="red")
> 
> ## Example 2: Show parameter recycling
> ## these pairs give us the same results
> dcoga(1:5, c(1, 2), c(1, 3, 4, 2, 5))
Warning in dcoga(1:5, c(1, 2), c(1, 3, 4, 2, 5)) :
  number of rate is not a multiple of shape.
[1] 0.06312673 0.30528954 0.31055854 0.18197777 0.08348673
> dcoga(1:5, c(1, 2, 1, 2, 1), c(1, 3, 4, 2, 5))
[1] 0.06312673 0.30528954 0.31055854 0.18197777 0.08348673
> 
> pcoga(1:5, c(1, 3, 5, 2, 2), c(3, 5))
Warning in pcoga(1:5, c(1, 3, 5, 2, 2), c(3, 5)) :
  number of shape is not a multiple of rate.
[1] 0.0001059771 0.0322652799 0.2792503481 0.6584623021 0.8928924252
> pcoga(1:5, c(1, 3, 5, 2, 2), c(3, 5, 3, 5, 3))
[1] 0.0001059771 0.0322652799 0.2792503481 0.6584623021 0.8928924252
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dcoga", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dcoga2dim")
> ### * dcoga2dim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dcoga2dim
> ### Title: Convolution of Two Gamma Distributions (Exact Method).
> ### Aliases: dcoga2dim pcoga2dim
> 
> ### ** Examples
> 
> ## Example 1: Correctness check
> set.seed(123)
> ## do grid
> y <- rcoga(100000, c(3,4), c(2,3))
> grid <- seq(0, 15, length.out=100)
> ## calculate pdf and cdf
> pdf <- dcoga2dim(grid, 3, 4, 2, 3)
> cdf <- pcoga2dim(grid, 3, 4, 2, 3)
> 
> ## plot pdf
> plot(density(y), col="blue")
> lines(grid, pdf, col="red")
> 
> ## plot cdf
> plot(ecdf(y), col="blue")
> lines(grid, cdf, col="red")
> 
> ## Example 2: Comparison with `dcoga` and `pcoga`
> ## these pairs give us the same results
> dcoga(1:5, c(1, 2), c(3, 4))
[1] 0.6314779483 0.0706734861 0.0047439818 0.0002679138 0.0000140897
> dcoga2dim(1:5, 1, 2, 3, 4)
[1] 0.6314779483 0.0706734861 0.0047439818 0.0002679138 0.0000140897
> 
> pcoga(1:5, c(1, 3), c(3, 5))
[1] 0.6238271 0.9677220 0.9981519 0.9999049 0.9999952
> pcoga2dim(1:5, 1, 3, 3, 5)
[1] 0.6238271 0.9677220 0.9981519 0.9999049 0.9999952
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dcoga2dim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dcoga_approx")
> ### * dcoga_approx
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dcoga_approx
> ### Title: Convolution of Gamma distribuitons (Approximation Method)
> ### Aliases: dcoga_approx pcoga_approx
> 
> ### ** Examples
> 
> ## Example 1: Correctness check
> set.seed(123)
> ## do grid
> y <- rcoga(100000, c(3,4,5), c(2,3,4))
> grid <- seq(0, 15, length.out=100)
> ## calculate pdf and cdf
> pdf <- dcoga_approx(grid, shape=c(3,4,5), rate=c(2,3,4))
> cdf <- pcoga_approx(grid, shape=c(3,4,5), rate=c(2,3,4))
> 
> ## plot pdf
> plot(density(y), col="blue")
> lines(grid, pdf, col="red")
> 
> ## plot cdf
> plot(ecdf(y), col="blue")
> lines(grid, cdf, col="red")
> 
> ## Example 2: Show parameter recycling
> ## these pairs give us the same results
> dcoga_approx(1:5, c(1, 2), c(1, 3, 4, 2, 5))
Warning in dcoga_approx(1:5, c(1, 2), c(1, 3, 4, 2, 5)) :
  number of rate is not a multiple of shape.
[1] 0.06949450 0.30031429 0.30376567 0.18411223 0.08690936
> dcoga_approx(1:5, c(1, 2, 1, 2, 1), c(1, 3, 4, 2, 5))
[1] 0.06949450 0.30031429 0.30376567 0.18411223 0.08690936
> 
> pcoga_approx(1:5, c(1, 3, 5, 2, 2), c(3, 5))
Warning in pcoga_approx(1:5, c(1, 3, 5, 2, 2), c(3, 5)) :
  number of shape is not a multiple of rate.
[1] 0.0001059771 0.0322652799 0.2792503481 0.6584623021 0.8928924252
> pcoga_approx(1:5, c(1, 3, 5, 2, 2), c(3, 5, 3, 5, 3))
[1] 0.0001059771 0.0322652799 0.2792503481 0.6584623021 0.8928924252
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dcoga_approx", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pcoga2dim_diff_shape")
> ### * pcoga2dim_diff_shape
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pcoga2dim_diff_shape
> ### Title: Recurrence Identity of Shape Parameter for 'pcoga2dim'
> ### Aliases: pcoga2dim_diff_shape
> 
> ### ** Examples
> 
> ## these pairs give us the same results
> pcoga2dim_diff_shape(3,2,4,5,4)
[1] 0.01255807
> pcoga2dim(3,2,4,5,4) - pcoga2dim(3,3,4,5,4)
[1] 0.01255807
> 
> pcoga2dim_diff_shape(3,0,4,3,5)
[1] 0.004091788
> pgamma(3,4,5) - pcoga2dim(3,1,4,3,5)
[1] 0.004091788
> 
> pcoga2dim_diff_shape(3,6,0,5,4)
[1] 0.00483947
> pgamma(3,6,5) - pgamma(3,7,5)
[1] 0.00483947
> 
> pcoga2dim_diff_shape(3,0,0,4,5)
[1] 6.144212e-06
> 1 - pgamma(3,1,4)
[1] 6.144212e-06
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pcoga2dim_diff_shape", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.75 0.055 0.807 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
