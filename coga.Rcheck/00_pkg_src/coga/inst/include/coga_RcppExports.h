// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_coga_RCPPEXPORTS_H_GEN_
#define RCPP_coga_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace coga {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("coga", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("coga", "coga_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in coga");
            }
        }
    }

    inline double dcoga2dim_nv(double x, double shape1, double shape2, double rate1, double rate2) {
        typedef SEXP(*Ptr_dcoga2dim_nv)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_dcoga2dim_nv p_dcoga2dim_nv = NULL;
        if (p_dcoga2dim_nv == NULL) {
            validateSignature("double(*dcoga2dim_nv)(double,double,double,double,double)");
            p_dcoga2dim_nv = (Ptr_dcoga2dim_nv)R_GetCCallable("coga", "coga_dcoga2dim_nv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dcoga2dim_nv(Rcpp::wrap(x), Rcpp::wrap(shape1), Rcpp::wrap(shape2), Rcpp::wrap(rate1), Rcpp::wrap(rate2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline NumericVector dcoga2dim(NumericVector x, double shape1, double shape2, double rate1, double rate2) {
        typedef SEXP(*Ptr_dcoga2dim)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_dcoga2dim p_dcoga2dim = NULL;
        if (p_dcoga2dim == NULL) {
            validateSignature("NumericVector(*dcoga2dim)(NumericVector,double,double,double,double)");
            p_dcoga2dim = (Ptr_dcoga2dim)R_GetCCallable("coga", "coga_dcoga2dim");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dcoga2dim(Rcpp::wrap(x), Rcpp::wrap(shape1), Rcpp::wrap(shape2), Rcpp::wrap(rate1), Rcpp::wrap(rate2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline double pcoga2dim_nv(double x, double shape1, double shape2, double rate1, double rate2) {
        typedef SEXP(*Ptr_pcoga2dim_nv)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pcoga2dim_nv p_pcoga2dim_nv = NULL;
        if (p_pcoga2dim_nv == NULL) {
            validateSignature("double(*pcoga2dim_nv)(double,double,double,double,double)");
            p_pcoga2dim_nv = (Ptr_pcoga2dim_nv)R_GetCCallable("coga", "coga_pcoga2dim_nv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pcoga2dim_nv(Rcpp::wrap(x), Rcpp::wrap(shape1), Rcpp::wrap(shape2), Rcpp::wrap(rate1), Rcpp::wrap(rate2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline NumericVector pcoga2dim(NumericVector x, double shape1, double shape2, double rate1, double rate2) {
        typedef SEXP(*Ptr_pcoga2dim)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pcoga2dim p_pcoga2dim = NULL;
        if (p_pcoga2dim == NULL) {
            validateSignature("NumericVector(*pcoga2dim)(NumericVector,double,double,double,double)");
            p_pcoga2dim = (Ptr_pcoga2dim)R_GetCCallable("coga", "coga_pcoga2dim");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pcoga2dim(Rcpp::wrap(x), Rcpp::wrap(shape1), Rcpp::wrap(shape2), Rcpp::wrap(rate1), Rcpp::wrap(rate2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector dcoga(NumericVector x, NumericVector shape, NumericVector rate) {
        typedef SEXP(*Ptr_dcoga)(SEXP,SEXP,SEXP);
        static Ptr_dcoga p_dcoga = NULL;
        if (p_dcoga == NULL) {
            validateSignature("NumericVector(*dcoga)(NumericVector,NumericVector,NumericVector)");
            p_dcoga = (Ptr_dcoga)R_GetCCallable("coga", "coga_dcoga");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dcoga(Rcpp::wrap(x), Rcpp::wrap(shape), Rcpp::wrap(rate));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector pcoga(NumericVector x, NumericVector shape, NumericVector rate) {
        typedef SEXP(*Ptr_pcoga)(SEXP,SEXP,SEXP);
        static Ptr_pcoga p_pcoga = NULL;
        if (p_pcoga == NULL) {
            validateSignature("NumericVector(*pcoga)(NumericVector,NumericVector,NumericVector)");
            p_pcoga = (Ptr_pcoga)R_GetCCallable("coga", "coga_pcoga");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pcoga(Rcpp::wrap(x), Rcpp::wrap(shape), Rcpp::wrap(rate));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_coga_RCPPEXPORTS_H_GEN_
